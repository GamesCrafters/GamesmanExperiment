#!/bin/bash
# This script was modified from its original version generated by ChatGPT.
# Always run this script from the root project directory.

# Function to print an error and exit
error_exit() {
    echo "Error: $1" 1>&2
    echo "Please ensure all dependencies are installed and try again."
    exit 1
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install dependencies on Debian/Ubuntu
install_debian() {
    sudo apt update && sudo apt install -y git autoconf automake cmake zlib1g zlib1g-dev
}

# Function to install dependencies on RHEL/CentOS
install_rhel() {
    sudo dnf update && sudo dnf install -y git autoconf automake cmake zlib zlib-devel
}

# Function to install dependencies on MacOS
install_macos() {
    # Assuming Homebrew is installed
    xcode-select --install || error_exit "Failed to install the Xcode Command Line Tools"
    brew install git autoconf automake cmake zlib
}

# Detect OS and architecture
OS="$(uname -s)"
ARCH="$(uname -m)"

# Install dependencies based on OS
case "$OS" in
Linux*)
    # Detect if using Debian/Ubuntu or RHEL/CentOS
    if [ -f /etc/debian_version ]; then
        install_debian || error_exit "Failed to install dependencies on Debian/Ubuntu."
    elif [ -f /etc/redhat-release ]; then
        install_rhel || error_exit "Failed to install dependencies on RHEL/CentOS."
    else
        error_exit "Unsupported Linux distribution."
    fi
    ;;
Darwin*)
    install_macos || error_exit "Failed to install dependencies on MacOS."
    ;;
*)
    error_exit "Unsupported operating system."
    ;;
esac

# Check for required commands
for cmd in git autoconf automake autoreconf cmake; do
    command_exists "$cmd" || error_exit "$cmd is not installed."
done

# Begin project setup
git submodule update --init || error_exit "Failed to update git submodules."

cd lib/json-c/ || error_exit "Failed to change directory to lib/json-c."
mkdir build && cd build || error_exit "Failed to create or change to the build directory."

CMAKE_FLAGS="-DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../../../res -DCMAKE_OSX_ARCHITECTURES=x86_64;arm64"
cmake $CMAKE_FLAGS ../ || error_exit "Failed to configure json-c using cmake."
make -j || error_exit "json-c make failed."
make install -j || error_exit "json-c make install failed."
cd ../../../ || error_exit "Failed to change directory back to project root."

autoreconf --install || error_exit "autoreconf --install failed."
./configure 'CFLAGS=-Wall -Wextra -g -O3 -DNDEBUG' || error_exit "configure script failed."
make -j || error_exit "GamesmanOne make failed."
