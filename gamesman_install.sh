#!/bin/bash
# This script was modified from its original version generated by ChatGPT.
# Always run this script from the root project directory.

# Function to print an error and exit
error_exit() {
    echo "Error: $1" 1>&2
    echo "Please ensure all dependencies are installed and try again."
    exit 1
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install dependencies on Debian/Ubuntu
install_debian() {
    sudo apt update && sudo apt install -y git autoconf automake cmake liblz4-dev liblzma-dev pkg-config zlib1g zlib1g-dev
}

# Function to install dependencies on RHEL/CentOS
install_rhel() {
    sudo dnf update && sudo dnf install -y git autoconf automake cmake lz4-devel pkg-config xz-devel zlib zlib-devel
}

# Function to install dependencies on MacOS
install_macos() {
    # Assuming Homebrew is installed
    xcode-select --install
    brew install git autoconf automake cmake lz4 pkg-config xz zlib || error_exit "brew install failed"
}

# Check if running as root, abort if yes.
if [ "$(id -u)" -eq 0 ]; then
    error_exit "Running the script as root is dangerous. Please rerun the script as normal user."
fi

# Detect OS and architecture
OS="$(uname -s)"
ARCH="$(uname -m)"

# Prompt the user for dependency installation.
read -p "Install dependencies (may require password for sudo on Linux) y/[N]? " response

# Default to 'N' if no response is given
response=${response:-N}

if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
    INSTALL_DEPENDENCIES=true
else
    INSTALL_DEPENDENCIES=false
fi

# Install dependencies based on OS.
if [ "$INSTALL_DEPENDENCIES" = true ]; then
    case "$OS" in
    Linux*)
        # Detect if using Debian/Ubuntu or RHEL/CentOS
        if [ -f /etc/debian_version ]; then
            install_debian || error_exit "Failed to install dependencies on Debian/Ubuntu."
        elif [ -f /etc/redhat-release ]; then
            install_rhel || error_exit "Failed to install dependencies on RHEL/CentOS."
        else
            error_exit "Unsupported Linux distribution."
        fi
        ;;
    Darwin*)
        install_macos || error_exit "Failed to install dependencies on MacOS."
        ;;
    *)
        error_exit "Unsupported operating system."
        ;;
    esac
else
    echo "Skipping installation of dependencies."
fi

# Check for required commands
for cmd in git autoconf automake autoreconf cmake; do
    command_exists "$cmd" || error_exit "command $cmd not found."
done

# Begin project setup
git submodule update --init || error_exit "Failed to update git submodules."

cd lib/json-c/ || error_exit "Failed to change directory to lib/json-c."
if [ ! -d "build" ]; then
  mkdir build
fi
cd build || error_exit "Failed to create or change to the build directory under lib/json-c/."

CMAKE_FLAGS="-DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../../../res -DCMAKE_OSX_ARCHITECTURES=x86_64;arm64 -DCMAKE_BUILD_TYPE=Release"
cmake $CMAKE_FLAGS ../ || error_exit "Failed to configure json-c using cmake."
make -j || error_exit "json-c make failed."
make install -j || error_exit "json-c make install failed."
cd ../../../ || error_exit "Failed to change directory back to project root."

if [ ! -d "build" ]; then
  mkdir build
fi
cd build || error_exit "Failed to create or change to the build directory."
cmake -DCMAKE_BUILD_TYPE=Release .. || error_exit "cmake failed to configure GamesmanOne."
cd .. || error_exit "Failed to change directory back to project root."
cmake --build build -- -j || error_exit "cmake failed to build GamesmanOne."
